GeneID = `#gene`
) %>%
dplyr::mutate(Phylostratum = as.numeric(Phylostratum))
# Yellow brain (or goldeb jelly fungus, yellow trembler, witches' butter)
Tremella_mesenterica.data <-
read_excel("Barrera-Redondo_2023_Maps_fungus.xlsx", sheet = "578456_gene_ages")
Tremella_mesenterica.PhyloMap <-
dplyr::select(
Tremella_mesenterica.data,
Phylostratum = rank,
GeneID = `#gene`
) %>%
dplyr::mutate(Phylostratum = as.numeric(Phylostratum))
# Mucor circinelloides
Mucor_circinelloides.data <-
read_excel("Barrera-Redondo_2023_Maps_fungus.xlsx", sheet = "36080_gene_ages")
Mucor_circinelloides.PhyloMap <-
dplyr::select(
Mucor_circinelloides.data,
Phylostratum = rank,
GeneID = `#gene`
) %>%
dplyr::mutate(Phylostratum = as.numeric(Phylostratum))
# Amphibian chytrid fungus
Batrachochytrium_dendrobatidis_JAM81.data <-
read_excel("Barrera-Redondo_2023_Maps_fungus.xlsx", sheet = "684364_gene_ages")
Batrachochytrium_dendrobatidis_JAM81.PhyloMap <-
dplyr::select(
Batrachochytrium_dendrobatidis_JAM81.data,
Phylostratum = rank,
GeneID = `#gene`
) %>%
dplyr::mutate(Phylostratum = as.numeric(Phylostratum))
# Fruit fly
Drosophila_melanogaster.data <-
read_excel("Barrera-Redondo_2023_Maps_animal.xlsx", sheet = "7227_gene_ages")
Drosophila_melanogaster.PhyloMap <-
dplyr::select(
Drosophila_melanogaster.data,
Phylostratum = rank,
GeneID = `#gene`
) %>%
dplyr::mutate(Phylostratum = as.numeric(Phylostratum))
# Caenorhabditis elegans
Caenorhabditis_elegans.data <-
read_excel("Barrera-Redondo_2023_Maps_animal.xlsx", sheet = "6239_gene_ages")
Caenorhabditis_elegans.PhyloMap <-
dplyr::select(
Caenorhabditis_elegans.data,
Phylostratum = rank,
GeneID = `#gene`
) %>%
dplyr::mutate(Phylostratum = as.numeric(Phylostratum))
# Hydatid worm
Echinococcus_granulosus.data <-
read_excel("Barrera-Redondo_2023_Maps_animal.xlsx", sheet = "6210_gene_ages")
Echinococcus_granulosus.PhyloMap <-
dplyr::select(
Echinococcus_granulosus.data,
Phylostratum = rank,
GeneID = `#gene`
) %>%
dplyr::mutate(Phylostratum = as.numeric(Phylostratum))
# Common octopus
Octopus_vulgaris.data <-
read_excel("Barrera-Redondo_2023_Maps_animal.xlsx", sheet = "6645_gene_ages")
Octopus_vulgaris.PhyloMap <-
dplyr::select(
Octopus_vulgaris.data,
Phylostratum = rank,
GeneID = `#gene`
) %>%
dplyr::mutate(Phylostratum = as.numeric(Phylostratum))
# Capitella teleta
Capitella_teleta.data <-
read_excel("Barrera-Redondo_2023_Maps_animal.xlsx", sheet = "283909_gene_ages")
Capitella_teleta.PhyloMap <-
dplyr::select(
Capitella_teleta.data,
Phylostratum = rank,
GeneID = `#gene`
) %>%
dplyr::mutate(Phylostratum = as.numeric(Phylostratum))
#	House mouse
Mus_musculus.data <-
read_excel("Barrera-Redondo_2023_Maps_animal.xlsx", sheet = "10090_gene_ages")
Mus_musculus.PhyloMap <-
dplyr::select(
Mus_musculus.data,
Phylostratum = rank,
GeneID = `#gene`
) %>%
dplyr::mutate(Phylostratum = as.numeric(Phylostratum))
#	Japanese sea cucumber
Apostichopus_japonicus.data <-
read_excel("Barrera-Redondo_2023_Maps_animal.xlsx", sheet = "307972_gene_ages")
Apostichopus_japonicus.PhyloMap <-
dplyr::select(
Apostichopus_japonicus.data,
Phylostratum = rank,
GeneID = `#gene`
) %>%
dplyr::mutate(Phylostratum = as.numeric(Phylostratum))
#	Starlet sea anemone
Nematostella_vectensis.data <-
read_excel("Barrera-Redondo_2023_Maps_animal.xlsx", sheet = "45351_gene_ages")
Nematostella_vectensis.PhyloMap <-
dplyr::select(
Nematostella_vectensis.data,
Phylostratum = rank,
GeneID = `#gene`
) %>%
dplyr::mutate(Phylostratum = as.numeric(Phylostratum))
# Trichoplax adhaerens
Trichoplax_adhaerens.data <-
read_excel("Barrera-Redondo_2023_Maps_animal.xlsx", sheet = "10228_gene_ages")
Trichoplax_adhaerens.PhyloMap <-
dplyr::select(
Trichoplax_adhaerens.data,
Phylostratum = rank,
GeneID = `#gene`
) %>%
dplyr::mutate(Phylostratum = as.numeric(Phylostratum))
# Amphimedon queenslandica
Amphimedon_queenslandica.data <-
read_excel("Barrera-Redondo_2023_Maps_animal.xlsx", sheet = "400682_gene_ages")
Amphimedon_queenslandica.PhyloMap <-
dplyr::select(
Amphimedon_queenslandica.data,
Phylostratum = rank,
GeneID = `#gene`
) %>%
dplyr::mutate(Phylostratum = as.numeric(Phylostratum))
# Thale cress
Arabidopsis_thaliana.data <-
read_excel("Barrera-Redondo_2023_Maps_plant.xlsx", sheet = "3702_gene_ages")
Arabidopsis_thaliana.PhyloMap <-
dplyr::select(
Arabidopsis_thaliana.data,
Phylostratum = rank,
GeneID = `#gene`
) %>%
dplyr::mutate(Phylostratum = as.numeric(Phylostratum))
# Soybean
Glycine_max.data <-
read_excel("Barrera-Redondo_2023_Maps_plant.xlsx", sheet = "3847_gene_ages")
Glycine_max.PhyloMap <-
dplyr::select(
Glycine_max.data,
Phylostratum = rank,
GeneID = `#gene`
) %>%
dplyr::mutate(Phylostratum = as.numeric(Phylostratum))
# Tomato
Solanum_lycopersicum.data <-
read_excel("Barrera-Redondo_2023_Maps_plant.xlsx", sheet = "4081_gene_ages")
Solanum_lycopersicum.PhyloMap <-
dplyr::select(
Solanum_lycopersicum.data,
Phylostratum = rank,
GeneID = `#gene`
) %>%
dplyr::mutate(Phylostratum = as.numeric(Phylostratum))
# Rice
Oryza_sativa.data <-
read_excel("Barrera-Redondo_2023_Maps_plant.xlsx", sheet = "39947_gene_ages")
Oryza_sativa.PhyloMap <-
dplyr::select(
Oryza_sativa.data,
Phylostratum = rank,
GeneID = `#gene`
) %>%
dplyr::mutate(Phylostratum = as.numeric(Phylostratum))
# Flat-leaved vanilla
Vanilla_planifolia.data <-
read_excel("Barrera-Redondo_2023_Maps_plant.xlsx", sheet = "51239_gene_ages")
Vanilla_planifolia.PhyloMap <-
dplyr::select(
Vanilla_planifolia.data,
Phylostratum = rank,
GeneID = `#gene`
) %>%
dplyr::mutate(Phylostratum = as.numeric(Phylostratum))
# Musa acuminata
Musa_acuminata.data <-
read_excel("Barrera-Redondo_2023_Maps_plant.xlsx", sheet = "214687_gene_ages")
Musa_acuminata.PhyloMap <-
dplyr::select(
Musa_acuminata.data,
Phylostratum = rank,
GeneID = `#gene`
) %>%
dplyr::mutate(Phylostratum = as.numeric(Phylostratum))
# White spruce
Picea_glauca.data <-
read_excel("Barrera-Redondo_2023_Maps_plant.xlsx", sheet = "3330_gene_ages")
Picea_glauca.PhyloMap <-
dplyr::select(
Picea_glauca.data,
Phylostratum = rank,
GeneID = `#gene`
) %>%
dplyr::mutate(Phylostratum = as.numeric(Phylostratum))
# Selaginella moellendorffii
Selaginella_moellendorffii.data <-
read_excel("Barrera-Redondo_2023_Maps_plant.xlsx", sheet = "88036_gene_ages")
Selaginella_moellendorffii.PhyloMap <-
dplyr::select(
Selaginella_moellendorffii.data,
Phylostratum = rank,
GeneID = `#gene`
) %>%
dplyr::mutate(Phylostratum = as.numeric(Phylostratum))
# Spreading earthmoss
Physcomitrella_patens.data <-
read_excel("Barrera-Redondo_2023_Maps_plant.xlsx", sheet = "3218_gene_ages")
Physcomitrella_patens.PhyloMap <-
dplyr::select(
Physcomitrella_patens.data,
Phylostratum = rank,
GeneID = `#gene`
) %>%
dplyr::mutate(Phylostratum = as.numeric(Phylostratum))
# Marchantia polymorpha
Marchantia_polymorpha.data <-
read_excel("Barrera-Redondo_2023_Maps_plant.xlsx", sheet = "3197_gene_ages")
Marchantia_polymorpha.PhyloMap <-
dplyr::select(
Marchantia_polymorpha.data,
Phylostratum = rank,
GeneID = `#gene`
) %>%
dplyr::mutate(Phylostratum = as.numeric(Phylostratum))
all_phylomaps <- ls(pattern="\\.PhyloMap")
# for (i in all_phylomaps) {
# for (i in all_phylomaps) {
#   obj <- base::get(i)
# for (i in all_phylomaps) {
#   obj <- base::get(i)
#   name <- rlang::sym(i)
# for (i in all_phylomaps) {
#   obj <- base::get(i)
#   name <- rlang::sym(i)
#   names(obj) <- rlang::set_names(obj, !!name)
# for (i in all_phylomaps) {
#   obj <- base::get(i)
#   name <- rlang::sym(i)
#   names(obj) <- rlang::set_names(obj, !!name)
#   usethis::use_data(obj, overwrite = TRUE)
# for (i in all_phylomaps) {
#   obj <- base::get(i)
#   name <- rlang::sym(i)
#   names(obj) <- rlang::set_names(obj, !!name)
#   usethis::use_data(obj, overwrite = TRUE)
# }
# for (i in all_phylomaps) {
#   obj <- base::get(i)
#   name <- rlang::sym(i)
#   names(obj) <- rlang::set_names(obj, !!name)
#   usethis::use_data(obj, overwrite = TRUE)
# }
Marchantia_polymorpha.PhyloMap
Physcomitrella_patens.PhyloMap
Selaginella_moellendorffii.PhyloMap
Musa_acuminata.PhyloMap
Vanilla_planifolia.PhyloMap
Oryza_sativa.PhyloMap
Solanum_lycopersicum.PhyloMap
print(all_phylomaps)
# for (i in all_phylomaps) {
#   obj <- base::get(i)
#   name <- rlang::sym(i)
#   names(obj) <- rlang::set_names(obj, !!name)
#   usethis::use_data(obj, overwrite = TRUE)
# }
usethis::use_data(Agaricus_bisporus.PhyloMap, overwrite = TRUE)
usethis::use_data(Amphimedon_queenslandica.PhyloMap, overwrite = TRUE)
usethis::use_data(Apostichopus_japonicus.PhyloMap, overwrite = TRUE)
usethis::use_data(Arabidopsis_thaliana.PhyloMap, overwrite = TRUE)
usethis::use_data(Aspergillus_niger_CBS_513.88.PhyloMap, overwrite = TRUE)
usethis::use_data(Batrachochytrium_dendrobatidis_JAM81.PhyloMap, overwrite = TRUE)
usethis::use_data(Caenorhabditis_elegans.PhyloMap, overwrite = TRUE)
usethis::use_data(Capitella_teleta.PhyloMap, overwrite = TRUE)
usethis::use_data(Cryptococcus_neoformans_var.neoformans_JEC21.PhyloMap, overwrite = TRUE)
usethis::use_data(Drosophila_melanogaster.PhyloMap, overwrite = TRUE)
usethis::use_data(Echinococcus_granulosus.PhyloMap, overwrite = TRUE)
usethis::use_data(Glycine_max.PhyloMap, overwrite = TRUE)
usethis::use_data(Kwoniella_mangroviensis.PhyloMap, overwrite = TRUE)
usethis::use_data(Marchantia_polymorpha.PhyloMap, overwrite = TRUE)
usethis::use_data(Morchella_conica.PhyloMap, overwrite = TRUE)
usethis::use_data(Mucor_circinelloides.PhyloMap, overwrite = TRUE)
usethis::use_data(Mus_musculus.PhyloMap, overwrite = TRUE)
usethis::use_data(Musa_acuminata.PhyloMap, overwrite = TRUE)
usethis::use_data(Nematostella_vectensis.PhyloMap, overwrite = TRUE)
usethis::use_data(Octopus_vulgaris.PhyloMap, overwrite = TRUE)
usethis::use_data(Oryza_sativa.PhyloMap, overwrite = TRUE)
usethis::use_data(Physcomitrella_patens.PhyloMap, overwrite = TRUE)
usethis::use_data(Picea_glauca.PhyloMap, overwrite = TRUE)
usethis::use_data(Saccharomyces_cerevisiae_S288C.PhyloMap, overwrite = TRUE)
usethis::use_data(Schizosaccharomyces_pombe.PhyloMap, overwrite = TRUE)
usethis::use_data(Selaginella_moellendorffii.PhyloMap, overwrite = TRUE)
usethis::use_data(Solanum_lycopersicum.PhyloMap, overwrite = TRUE)
usethis::use_data(Tremella_mesenterica.PhyloMap, overwrite = TRUE)
usethis::use_data(Trichoplax_adhaerens.PhyloMap, overwrite = TRUE)
usethis::use_data(Vanilla_planifolia.PhyloMap, overwrite = TRUE)
devtools::load_all(".")
rm(list = ls())
devtools::load_all(".")
Agaricus_bisporus.PhyloMap
devtools::load_all(".")
devtools::load_all(".")
Agaricus_bisporus.PhyloMap
usethis::use_mit_license()
usethis::use_r("Agaricus_bisporus.PhyloMap")
Agaricus_bisporus.PhyloMap
load_all()
devtools::load_all()
Agaricus_bisporus.PhyloMap
devtools::document()
?Agaricus_bisporus.PhyloMap
devtools::document()
devtools::document()
?Agaricus_bisporus.PhyloMap
devtools::document()
usethis::use_r("Amphimedon_queenslandica.PhyloMap")
Amphimedon_queenslandica.PhyloMap
usethis::use_r("Amphimedon_queenslandica.PhyloMap")
devtools::document()
?Amphimedon_queenslandica.PhyloMap
devtools::document()
?Amphimedon_queenslandica.PhyloMap
devtools::document()
usethis::use_r(Apostichopus_japonicus.PhyloMap)
usethis::use_r("Amphimedon_queenslandica.PhyloMap")
usethis::use_r("Apostichopus_japonicus.PhyloMap")
Apostichopus_japonicus.PhyloMap
devtools::document()
usethis::use_r("Apostichopus_japonicus.PhyloMap")
Apostichopus_japonicus.PhyloMap
?Apostichopus_japonicus.PhyloMap
use_lifecycle_badge()
usethis::use_lifecycle_badge()
usethis::use_lifecycle_badge("experimental")
usethis::use_lifecycle_badge("experimental")
PhyloMap <- PhyloExpressionSetExample[ , 1:2]
PhyloMap <- myTAI::PhyloExpressionSetExample[ , 1:2]
library(myTAI)
data(PhyloExpressionSetExample)
PhyloMap <- PhyloExpressionSetExample[ , 1:2]
head(PhyloMap)
Aj.map <- phylomapr::Apostichopus_japonicus.PhyloMap
Aj.map
Aj.map{,2}
Aj.map[,2]
Aj.map[,2]$GeneID
geneIDs <- Aj.map[,2]$GeneID
set.seed(123)
# Generate log-normally distributed counts for each gene and developmental stage
counts_24H <- rlnorm(length(geneIDs), meanlog = 3, sdlog = 0.5)
counts_48H <- rlnorm(length(geneIDs), meanlog = 4, sdlog = 0.7)
counts_72H <- rlnorm(length(geneIDs), meanlog = 5, sdlog = 0.9)
head(counts_24H)
counts_24H\
count_table <- data.frame(
GeneID = geneIDs,
`24H` = counts_24H,
`48H` = counts_48H,
`72H` = counts_72H
)
head(count_table)
print(count_table)
counts_24H
Aj.map <- phylomapr::Apostichopus_japonicus.PhyloMap
geneIDs <- Aj.map$GeneID
head(geneIDs)
counts_24H <- rlnorm(length(geneIDs), meanlog = 3, sdlog = 0.5)
counts_48H <- rlnorm(length(geneIDs), meanlog = 4, sdlog = 0.7)
counts_72H <- rlnorm(length(geneIDs), meanlog = 5, sdlog = 0.9)
head(counts_72H)
count_table <- data.frame(
GeneID = geneIDs,
`24H` = counts_24H,
`48H` = counts_48H,
`72H` = counts_72H
)
count_table
count_table <- tibble(
GeneID = geneIDs,
`24H` = counts_24H,
`48H` = counts_48H,
`72H` = counts_72H
)
count_table <- tibble::tibble(
GeneID = geneIDs,
`24H` = counts_24H,
`48H` = counts_48H,
`72H` = counts_72H
)
count_table
count_table <- tibble::tibble(
GeneID = geneIDs,
24H = counts_24H,
count_table <- tibble::tibble(
GeneID = geneIDs,
"24H" = counts_24H,
"48H" = counts_48H,
"72H" = counts_72H
)
count_table
count_table <- tibble::tibble(
GeneID = geneIDs,
24h = counts_24H,
# Set the random seed for reproducibility
set.seed(123)
# Generate log-normally distributed counts for each gene and developmental stage
counts_24H <- rlnorm(length(Aj.map$GeneID), meanlog = 3, sdlog = 0.5)
counts_48H <- rlnorm(length(Aj.map$GeneID), meanlog = 4, sdlog = 0.7)
counts_72H <- rlnorm(length(Aj.map$GeneID), meanlog = 5, sdlog = 0.9)
# Create a data frame with the count table
Aj.ExpressionMatrix <- tibble::tibble(
GeneID = Aj.map$GeneID,
`24H` = counts_24H,
`48H` = counts_48H,
`72H` = counts_72H
)
rm(geneIDs)
sum(rlnorm(length(Aj.map$GeneID), meanlog = 3, sdlog = 0.5))
sum(rlnorm(length(Aj.map$GeneID), meanlog = 4, sdlog = 0.7))
sum(rlnorm(length(Aj.map$GeneID), meanlog = 5, sdlog = 0.9))
dist(rlnorm(length(Aj.map$GeneID), meanlog = 5, sdlog = 0.9))
?rlnorm
sum( rlnorm(length(Aj.map$GeneID), meanlog = 4, sdlog = 0.5))
sum( rlnorm(length(Aj.map$GeneID), meanlog = 4, sdlog = 0.6))
sum( rlnorm(length(Aj.map$GeneID), meanlog = 4, sdlog = 0.9))
sum( rlnorm(length(Aj.map$GeneID), meanlog = 4, sdlog = 1))
sum( rlnorm(length(Aj.map$GeneID), meanlog = 4, sdlog = 0.5))
sum( rlnorm(length(Aj.map$GeneID), meanlog = 4, sdlog = 0.3))
Aj.ExpressionMatrix <- tibble::tibble(
GeneID = Aj.map$GeneID,
`24H` = rlnorm(length(Aj.map$GeneID), meanlog = 5, sdlog = 0.5),
`48H` = rlnorm(length(Aj.map$GeneID), meanlog = 5, sdlog = 0.5),
`72H` = rlnorm(length(Aj.map$GeneID), meanlog = 5, sdlog = 0.5)
)
head(Aj.ExpressionMatrix)
?rlnorm
Aj.map <- phylomapr::Apostichopus_japonicus.PhyloMap
Aj.ExpressionMatrix <- tibble::tibble(
GeneID = Aj.map$GeneID,
`24H` = stats::rlnorm(length(Aj.map$GeneID), meanlog = 5, sdlog = 0.5),
`48H` = stats::rlnorm(length(Aj.map$GeneID), meanlog = 5, sdlog = 0.5),
`72H` = stats::rlnorm(length(Aj.map$GeneID), meanlog = 5, sdlog = 0.5)
)
myTAI::MatchMap(Aj.map, Aj.ExpressionMatrix, remove.duplicates = FALSE, accumulate = NULL)
PES <- myTAI::MatchMap(Aj.map, Aj.ExpressionMatrix, remove.duplicates = FALSE, accumulate = NULL)
PlotSignature(PES)
?drop_na
??drop_na
PlotSignature(tidyr::drop_na(PES))
document
??Documentation
??document
devtools::document()
??phylomapr
library(phylomapr)
??phylomapr
??myTAI
?myTAI
??myTAI
roxygen2::roxygenize()
??phylomapr
stats::rlnorm(length(200), meanlog = 5, sdlog = 0.5) %>% hist()
hist(stats::rlnorm(length(200), meanlog = 5, sdlog = 0.5))
dist(stats::rlnorm(length(200), meanlog = 5, sdlog = 0.5))
plot(stats::rlnorm(length(200), meanlog = 5, sdlog = 0.5))
stats::rlnorm(length(200), meanlog = 5, sdlog = 0.5)
plot(stats::rlnorm(200, meanlog = 5, sdlog = 0.5))
hist(stats::rlnorm(200, meanlog = 5, sdlog = 0.5))
hist(stats::rlnorm(200, meanlog = 5, sdlog = 2))
hist(stats::rlnorm(200, meanlog = 5, sdlog = 1))
hist(stats::rlnorm(200, meanlog = 5, sdlog = 1), breaks = 2)
hist(stats::rlnorm(200, meanlog = 5, sdlog = 1), breaks = 200)
sum(stats::rlnorm(200, meanlog = 5, sdlog = 1))
sum(stats::rlnorm(200, meanlog = 3, sdlog = 1))
hist(stats::rlnorm(200, meanlog = 3, sdlog = 1), breaks = 200)
hist(stats::rlnorm(200, meanlog = 3, sdlog = 1), breaks = 100)
Aj.ExpressionMatrix <- tibble::tibble(
GeneID = Aj.map$GeneID,
`24H` = stats::rlnorm(length(Aj.map$GeneID), meanlog = 3, sdlog = 1),
`48H` = stats::rlnorm(length(Aj.map$GeneID), meanlog = 3, sdlog = 1),
`72H` = stats::rlnorm(length(Aj.map$GeneID), meanlog = 3, sdlog = 1)
)
Aj.PES <- myTAI::MatchMap(Aj.map, Aj.ExpressionMatrix, remove.duplicates = FALSE, accumulate = NULL)
myTAI::PlotSignature(tidyr::drop_na(Aj.PES))
set.seed(123)
# Generate log-normally distributed counts (controversial) for each gene and developmental stage, and
# Create a data frame with the count table
Aj.ExpressionMatrix <- tibble::tibble(
GeneID = Aj.map$GeneID,
`24H` = stats::rlnorm(length(Aj.map$GeneID), meanlog = 3, sdlog = 1),
`48H` = stats::rlnorm(length(Aj.map$GeneID), meanlog = 3, sdlog = 1),
`72H` = stats::rlnorm(length(Aj.map$GeneID), meanlog = 3, sdlog = 1)
)
Aj.PES <- myTAI::MatchMap(Aj.map, Aj.ExpressionMatrix, remove.duplicates = FALSE, accumulate = NULL)
myTAI::PlotSignature(tidyr::drop_na(Aj.PES))
myTAI::tf(tidyr::drop_na(Aj.PES))
myTAI::tf(tidyr::drop_na(Aj.PES),FUN = log2, pseudocount = 1)
Aj.PES.log2 <- myTAI::tf(tidyr::drop_na(Aj.PES),FUN = log2, pseudocount = 1)
hist(Aj.PES.log2$`24H`)
hist(Aj.PES$`24H`)
hist(Aj.PES$`24H`, breaks = 50)
hist(Aj.PES$`24H`, breaks = 200)
myTAI::PlotSignature(tidyr::drop_na(Aj.PES.log2))
